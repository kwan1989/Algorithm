package programmers;

import java.util.Arrays;
import java.util.Comparator;

public class Greedy_단속카메라 {

    /**
     * https://programmers.co.kr/learn/courses/30/lessons/42884?language=java
     *
     * 문제 설명
     * 고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다.
     * 고속도로를 이동하는 차량의 경로 routes가 매개변수로 주어질 때, 모든 차량이 한 번은 단속용 카메라를 만나도록 하려면 최소 몇 대의 카메라를 설치해야 하는지를 return 하도록 solution 함수를 완성하세요.
     *
     * 제한사항
     * 차량의 대수는 1대 이상 10,000대 이하입니다.
     * routes에는 차량의 이동 경로가 포함되어 있으며 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점, routes[i][1]에는 i번째 차량이 고속도로에서 나간 지점이 적혀 있습니다.
     * 차량의 진입/진출 지점에 카메라가 설치되어 있어도 카메라를 만난것으로 간주합니다.
     * 차량의 진입 지점, 진출 지점은 -30,000 이상 30,000 이하입니다.
     *
     * 입출력 예
     * routes	                                    return
     * [[-20,15], [-14,-5], [-18,-13], [-5,-3]]	    2
     *
     * 입출력 예 설명
     * -5 지점에 카메라를 설치하면 두 번째, 네 번째 차량이 카메라를 만납니다.
     * -15 지점에 카메라를 설치하면 첫 번째, 세 번째 차량이 카메라를 만납니다.
     *
     *
     *
     * 정확성  테스트
     * 테스트 1 〉	통과 (2.40ms, 52.1MB)
     * 테스트 2 〉	통과 (2.57ms, 52.4MB)
     * 테스트 3 〉	통과 (2.64ms, 53.2MB)
     * 테스트 4 〉	통과 (2.81ms, 52.2MB)
     * 테스트 5 〉	통과 (2.81ms, 53MB)
     *
     * 효율성  테스트
     * 테스트 1 〉	통과 (8.47ms, 52.8MB)
     * 테스트 2 〉	통과 (5.86ms, 53.6MB)
     * 테스트 3 〉	통과 (12.53ms, 53.6MB)
     * 테스트 4 〉	통과 (2.96ms, 52.5MB)
     * 테스트 5 〉	통과 (14.03ms, 58MB)
     *
     * @param routes
     * @return
     */
    public int solution(int[][] routes) {
        return installCam(routes);
    }



    /**
     *  동작순서
     *   1) 진출(오름차순) 정렬
     *   2) [카메라] < [진입] 의 조건이 성립이 된다면
     *   3) [진출] = [카메라] 진출에 카메라를 설치 한다.
     *   4) 이후 다음 조건에서는 진입 부분으로 카메라의 설치 조건을 판단한다. (이미 시작전에 진출의 오름차순 정렬 때문에 진출은 볼 필요가 없다.)
     *
     * @param routes
     * @return 설치 된 카메라 수
     */
    public int installCam(int[][] routes) {
        int count = 0;

        // 진출 순으로 정렬
        Arrays.sort(routes, Comparator.comparingInt(o1 -> o1[1]));

        // 카메라 설치 위치
        // 위치는 일단 첫 배열의 시작 --
        int cam = routes[0][0] - 1;


        /**
         *  위 진출 순으로 정렬 후
         *  초기의 카메라 위치는 첫 배열 첫번째의 -1 이기 때문에 첫 배열에서 무조건 설치.
         *
         *          -20       -10       0         10        20
         *  idx
         *  [3]     □□■■■■■★□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□       [-18, -13]
         *  [2]     □□□□□□■■■■■■■■■■□□□□□□□□□□□□□□□□□□□□□□□□□       [-14, -5]
         *  [4]     □□□□□□□□□□□□□□□■■★□□□□□□□□□□□□□□□□□□□□□□       [-5, -3]
         *  [1]     ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■□□□□□       [-20, 15]
         */
        for (int[] route : routes) {
            int start = route[0];   // 진입
            int end = route[1];     // 진출

            // 카메라보다 진입 지점이 앞서 있다면
            if (cam < start) {

                // 진출 지점에 카메라를 설치한다
                cam = end;
                count++;
            }
        }
        return count;
    }
}
